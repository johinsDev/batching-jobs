name: üöÄ deploy
on:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build:
    name: üîÅ ci
    runs-on: ubuntu-latest
    environment: prod
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DATABASE_AUTH_TOKEN: ${{ secrets.DATABASE_AUTH_TOKEN }}
      BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
      BETTER_AUTH_URL: ${{ secrets.BETTER_AUTH_URL }}
      CLIENT_ID_GITHUB: ${{ secrets.CLIENT_ID_GITHUB }}
      CLIENT_SECRET_GITHUB: ${{ secrets.CLIENT_SECRET_GITHUB }}
      TRIGGER_SECRET_KEY: ${{ secrets.TRIGGER_SECRET_KEY }}

    strategy:
      matrix:
        step: ["types:check", "lint:check", "format:check", "build"]

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: üî∏ Setup node
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì¶ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üß™ ${{ matrix.step }}
        run: pnpm run ${{ matrix.step }}

  deploy:
    name: üöÄ deploy
    runs-on: ubuntu-latest
    environment: prod
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DATABASE_AUTH_TOKEN: ${{ secrets.DATABASE_AUTH_TOKEN }}
      BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
      BETTER_AUTH_URL: ${{ secrets.BETTER_AUTH_URL }}
      CLIENT_ID_GITHUB: ${{ secrets.CLIENT_ID_GITHUB }}
      CLIENT_SECRET_GITHUB: ${{ secrets.CLIENT_SECRET_GITHUB }}
      TRIGGER_SECRET_KEY: ${{ secrets.TRIGGER_SECRET_KEY }}

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì¶ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Migrations
        run: pnpm run db:migrate

      - name: üöÄ Deploy Trigger.dev
        env:
          TRIGGER_ACCESS_TOKEN: ${{ secrets.TRIGGER_ACCESS_TOKEN }}
        run: |
          pnpm dlx trigger.dev@latest deploy

      - name: install Vercel CLI with pnpm
        run: pnpm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
          fi
